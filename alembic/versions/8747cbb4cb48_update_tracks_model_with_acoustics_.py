"""Update tracks model with acoustics informations

Revision ID: 8747cbb4cb48
Revises: 4a1bc322656f
Create Date: 2025-05-18 20:17:57.419734

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8747cbb4cb48'
down_revision: Union[str, None] = '4a1bc322656f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create tables only if they don't exist
    inspector = sa.inspect(op.get_bind())
    existing_tables = inspector.get_table_names()

    if 'genre_tags' not in existing_tables:
        op.create_table('genre_tags',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_genre_tags')),
        sa.UniqueConstraint('name', name=op.f('uq_genre_tags_name'))
        )

    if 'mood_tags' not in existing_tables:
        op.create_table('mood_tags',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_mood_tags')),
        sa.UniqueConstraint('name', name=op.f('uq_mood_tags_name'))
        )

    if 'track_genre_tags' not in existing_tables:
        op.create_table('track_genre_tags',
        sa.Column('track_id', sa.Integer(), nullable=True),
        sa.Column('genre_tag_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['genre_tag_id'], ['genre_tags.id'], name=op.f('fk_track_genre_tags_genre_tag_id_genre_tags')),
        sa.ForeignKeyConstraint(['track_id'], ['tracks.id'], name=op.f('fk_track_genre_tags_track_id_tracks'))
        )

    if 'track_mood_tags' not in existing_tables:
        op.create_table('track_mood_tags',
        sa.Column('track_id', sa.Integer(), nullable=True),
        sa.Column('mood_tag_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['mood_tag_id'], ['mood_tags.id'], name=op.f('fk_track_mood_tags_mood_tag_id_mood_tags')),
        sa.ForeignKeyConstraint(['track_id'], ['tracks.id'], name=op.f('fk_track_mood_tags_track_id_tracks'))
        )

    # Add columns to tracks table
    with op.batch_alter_table('tracks', schema=None) as batch_op:
        # Get existing columns
        existing_columns = [col['name'] for col in inspector.get_columns('tracks')]
        
        # Add columns only if they don't exist
        columns_to_add = {
            'bpm': sa.Float(),
            'key': sa.String(),
            'scale': sa.String(),
            'danceability': sa.Float(),
            'mood_happy': sa.Float(),
            'mood_aggressive': sa.Float(),
            'mood_party': sa.Float(),
            'mood_relaxed': sa.Float(),
            'instrumental': sa.Boolean(),
            'acoustic': sa.Boolean(),
            'tonal': sa.Boolean(),
            'genre_main': sa.String()
        }

        for col_name, col_type in columns_to_add.items():
            if col_name not in existing_columns:
                batch_op.add_column(sa.Column(col_name, col_type, nullable=True))

        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
               
        try:
            batch_op.create_unique_constraint(batch_op.f('uq_tracks_musicbrainz_id'), ['musicbrainz_id'])
            batch_op.create_unique_constraint(batch_op.f('uq_tracks_path'), ['path'])
        except Exception:
            # Constraints might already exist
            pass

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('tracks', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_tracks_path'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_tracks_musicbrainz_id'), type_='unique')
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)
        batch_op.drop_column('genre_main')
        batch_op.drop_column('tonal')
        batch_op.drop_column('acoustic')
        batch_op.drop_column('instrumental')
        batch_op.drop_column('mood_relaxed')
        batch_op.drop_column('mood_party')
        batch_op.drop_column('mood_aggressive')
        batch_op.drop_column('mood_happy')
        batch_op.drop_column('danceability')
        batch_op.drop_column('scale')
        batch_op.drop_column('key')
        batch_op.drop_column('bpm')

    op.drop_table('track_mood_tags')
    op.drop_table('track_genre_tags')
    op.drop_table('mood_tags')
    op.drop_table('genre_tags')
    # ### end Alembic commands ###
