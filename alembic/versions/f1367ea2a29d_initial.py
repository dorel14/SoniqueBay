"""'initial'

Revision ID: f1367ea2a29d
Revises: 
Create Date: 2025-06-11 19:06:26.621404

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f1367ea2a29d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('artists',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('musicbrainz_artistid', sa.String(), nullable=True),
    sa.Column('date_added', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('date_modified', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_artists'))
    )
    op.create_table('covers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('entity_type', sa.Enum('TRACK', 'ALBUM', 'ARTIST', name='covertype'), nullable=False),
    sa.Column('entity_id', sa.Integer(), nullable=False),
    sa.Column('cover_data', sa.String(), nullable=True),
    sa.Column('mime_type', sa.String(), nullable=True),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('date_added', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('date_modified', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_covers')),
    sa.UniqueConstraint('entity_type', 'entity_id', name='uq_entity_cover')
    )
    with op.batch_alter_table('covers', schema=None) as batch_op:
        batch_op.create_index('idx_entity_lookup', ['entity_type', 'entity_id'], unique=False)

    op.create_table('genre_tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_genre_tags')),
    sa.UniqueConstraint('name', name=op.f('uq_genre_tags_name'))
    )
    op.create_table('genres',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('date_added', sa.DateTime(), nullable=True),
    sa.Column('date_modified', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_genres')),
    sa.UniqueConstraint('name', name=op.f('uq_genres_name'))
    )
    op.create_table('mood_tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_mood_tags')),
    sa.UniqueConstraint('name', name=op.f('uq_mood_tags_name'))
    )
    op.create_table('settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=True),
    sa.Column('is_encrypted', sa.Boolean(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('date_added', sa.DateTime(), nullable=True),
    sa.Column('date_modified', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_settings')),
    sa.UniqueConstraint('key', name=op.f('uq_settings_key'))
    )
    op.create_table('albums',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('album_artist_id', sa.Integer(), nullable=False),
    sa.Column('release_year', sa.String(), nullable=True),
    sa.Column('musicbrainz_albumid', sa.String(), nullable=True),
    sa.Column('date_added', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('date_modified', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['album_artist_id'], ['artists.id'], name=op.f('fk_albums_album_artist_id_artists')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_albums'))
    )
    op.create_table('artist_genre_links',
    sa.Column('artist_id', sa.Integer(), nullable=True),
    sa.Column('genre_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['artist_id'], ['artists.id'], name=op.f('fk_artist_genre_links_artist_id_artists')),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], name=op.f('fk_artist_genre_links_genre_id_genres'))
    )
    op.create_table('artist_genres',
    sa.Column('artist_id', sa.Integer(), nullable=True),
    sa.Column('genre_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['artist_id'], ['artists.id'], name=op.f('fk_artist_genres_artist_id_artists'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], name=op.f('fk_artist_genres_genre_id_genres'), ondelete='CASCADE')
    )
    op.create_table('album_genre_links',
    sa.Column('album_id', sa.Integer(), nullable=True),
    sa.Column('genre_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['album_id'], ['albums.id'], name=op.f('fk_album_genre_links_album_id_albums')),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], name=op.f('fk_album_genre_links_genre_id_genres'))
    )
    op.create_table('album_genres',
    sa.Column('album_id', sa.Integer(), nullable=True),
    sa.Column('genre_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['album_id'], ['albums.id'], name=op.f('fk_album_genres_album_id_albums'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], name=op.f('fk_album_genres_genre_id_genres'), ondelete='CASCADE')
    )
    op.create_table('tracks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('album_id', sa.Integer(), nullable=True),
    sa.Column('path', sa.String(), nullable=True),
    sa.Column('duration', sa.Integer(), nullable=True),
    sa.Column('track_number', sa.String(), nullable=True),
    sa.Column('disc_number', sa.String(), nullable=True),
    sa.Column('year', sa.String(), nullable=True),
    sa.Column('genre', sa.String(), nullable=True),
    sa.Column('musicbrainz_id', sa.String(), nullable=True),
    sa.Column('musicbrainz_albumid', sa.String(), nullable=True),
    sa.Column('musicbrainz_artistid', sa.String(), nullable=True),
    sa.Column('musicbrainz_albumartistid', sa.String(), nullable=True),
    sa.Column('musicbrainz_genre', sa.String(), nullable=True),
    sa.Column('acoustid_fingerprint', sa.String(), nullable=True),
    sa.Column('file_type', sa.String(), nullable=True),
    sa.Column('cover_data', sa.String(), nullable=True),
    sa.Column('cover_mime_type', sa.String(), nullable=True),
    sa.Column('bitrate', sa.Integer(), nullable=True),
    sa.Column('date_added', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('date_modified', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('track_artist_id', sa.Integer(), nullable=False),
    sa.Column('featured_artists', sa.String(), nullable=True),
    sa.Column('bpm', sa.Float(), nullable=True),
    sa.Column('key', sa.String(), nullable=True),
    sa.Column('scale', sa.String(), nullable=True),
    sa.Column('danceability', sa.Float(), nullable=True),
    sa.Column('mood_happy', sa.Float(), nullable=True),
    sa.Column('mood_aggressive', sa.Float(), nullable=True),
    sa.Column('mood_party', sa.Float(), nullable=True),
    sa.Column('mood_relaxed', sa.Float(), nullable=True),
    sa.Column('instrumental', sa.Float(), nullable=True),
    sa.Column('acoustic', sa.Float(), nullable=True),
    sa.Column('tonal', sa.Float(), nullable=True),
    sa.Column('genre_main', sa.String(), nullable=True),
    sa.Column('camelot_key', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['album_id'], ['albums.id'], name=op.f('fk_tracks_album_id_albums')),
    sa.ForeignKeyConstraint(['track_artist_id'], ['artists.id'], name=op.f('fk_tracks_track_artist_id_artists')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tracks')),
    sa.UniqueConstraint('musicbrainz_id', name=op.f('uq_tracks_musicbrainz_id')),
    sa.UniqueConstraint('path', name=op.f('uq_tracks_path'))
    )
    op.create_table('track_genre_links',
    sa.Column('track_id', sa.Integer(), nullable=True),
    sa.Column('genre_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], name=op.f('fk_track_genre_links_genre_id_genres')),
    sa.ForeignKeyConstraint(['track_id'], ['tracks.id'], name=op.f('fk_track_genre_links_track_id_tracks'))
    )
    op.create_table('track_genre_tags',
    sa.Column('track_id', sa.Integer(), nullable=True),
    sa.Column('tag_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['tag_id'], ['genre_tags.id'], name=op.f('fk_track_genre_tags_tag_id_genre_tags'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['track_id'], ['tracks.id'], name=op.f('fk_track_genre_tags_track_id_tracks'), ondelete='CASCADE')
    )
    op.create_table('track_genres',
    sa.Column('track_id', sa.Integer(), nullable=True),
    sa.Column('genre_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], name=op.f('fk_track_genres_genre_id_genres'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['track_id'], ['tracks.id'], name=op.f('fk_track_genres_track_id_tracks'), ondelete='CASCADE')
    )
    op.create_table('track_mood_tags',
    sa.Column('track_id', sa.Integer(), nullable=True),
    sa.Column('tag_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['tag_id'], ['mood_tags.id'], name=op.f('fk_track_mood_tags_tag_id_mood_tags'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['track_id'], ['tracks.id'], name=op.f('fk_track_mood_tags_track_id_tracks'), ondelete='CASCADE')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('track_mood_tags')
    op.drop_table('track_genres')
    op.drop_table('track_genre_tags')
    op.drop_table('track_genre_links')
    op.drop_table('tracks')
    op.drop_table('album_genres')
    op.drop_table('album_genre_links')
    op.drop_table('artist_genres')
    op.drop_table('artist_genre_links')
    op.drop_table('albums')
    op.drop_table('settings')
    op.drop_table('mood_tags')
    op.drop_table('genres')
    op.drop_table('genre_tags')
    with op.batch_alter_table('covers', schema=None) as batch_op:
        batch_op.drop_index('idx_entity_lookup')

    op.drop_table('covers')
    op.drop_table('artists')
    # ### end Alembic commands ###
