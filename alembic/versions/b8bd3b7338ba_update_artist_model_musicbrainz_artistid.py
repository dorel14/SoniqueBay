"""Update artist model musicbrainz_artistid

Revision ID: b8bd3b7338ba
Revises: ca62d38d2df4
Create Date: 2025-05-18 19:00:43.389596

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b8bd3b7338ba'
down_revision: Union[str, None] = 'ca62d38d2df4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def has_table(name: str) -> bool:
    """Vérifie si une table existe."""
    conn = op.get_bind()
    insp = sa.inspect(conn)
    return insp.has_table(name)


def upgrade() -> None:
    """Upgrade schema."""
    # 1. Nettoyer toutes les tables temporaires
    for table in ['_alembic_tmp_artists', 'artists_new', '_alembic_tmp_tracks', 'tracks_new']:
        op.execute(f"DROP TABLE IF EXISTS {table}")

    # 2. Créer les nouvelles tables temporaires
    op.execute("""
        CREATE TABLE artists_new (
            id INTEGER PRIMARY KEY,
            name VARCHAR,
            genre VARCHAR,
            musicbrainz_artistid VARCHAR UNIQUE,
            cover_url VARCHAR,
            date_added DATETIME DEFAULT CURRENT_TIMESTAMP,
            date_modified DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)

    op.execute("""
        CREATE TABLE tracks_new (
            id INTEGER PRIMARY KEY,
            title VARCHAR,
            track_artist_id INTEGER NOT NULL,
            album_id INTEGER,
            path VARCHAR UNIQUE,
            duration INTEGER,
            featured_artists VARCHAR,
            year VARCHAR,
            genre VARCHAR,
            musicbrainz_id VARCHAR UNIQUE,
            file_type VARCHAR,
            bitrate INTEGER,
            date_added DATETIME DEFAULT CURRENT_TIMESTAMP,
            date_modified DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(track_artist_id) REFERENCES artists_new(id)
        )
    """)

    # 3. Copier les données
    op.execute("""
        INSERT INTO artists_new 
        SELECT id, name, genre, musicbrain_id, cover_url, date_added, date_modified 
        FROM artists
    """)

    op.execute("""
        INSERT INTO tracks_new (
            id, title, track_artist_id, album_id, path, duration,
            date_added, date_modified
        )
        SELECT 
            id, title, artist_id, album_id, path, duration,
            date_added, date_modified
        FROM tracks
    """)

    # 4. Remplacer les tables
    op.execute("DROP TABLE tracks")
    op.execute("DROP TABLE artists")
    op.execute("ALTER TABLE artists_new RENAME TO artists")
    op.execute("ALTER TABLE tracks_new RENAME TO tracks")


def has_column(table_name: str, column_name: str) -> bool:
    """Vérifie si une colonne existe."""
    conn = op.get_bind()
    insp = sa.inspect(conn)
    columns = [col['name'] for col in insp.get_columns(table_name)]
    return column_name in columns


# ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('tracks', schema=None) as batch_op:
        batch_op.add_column(sa.Column('cover_url', sa.VARCHAR(), nullable=True))
        batch_op.add_column(sa.Column('mime_type', sa.VARCHAR(), nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('track_artist_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('artists', schema=None) as batch_op:
        batch_op.add_column(sa.Column('musicbrain_id', sa.VARCHAR(), nullable=True))
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('musicbrainz_artistid')

    op.create_table('tracks_new',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), nullable=True),
    sa.Column('track_artist_id', sa.INTEGER(), nullable=False),
    sa.Column('album_id', sa.INTEGER(), nullable=True),
    sa.Column('path', sa.VARCHAR(length=255), nullable=True),
    sa.Column('duration', sa.INTEGER(), nullable=True),
    sa.Column('featured_artists', sa.VARCHAR(length=255), nullable=True),
    sa.Column('year', sa.VARCHAR(length=10), nullable=True),
    sa.Column('genre', sa.VARCHAR(length=100), nullable=True),
    sa.Column('musicbrainz_id', sa.VARCHAR(length=50), nullable=True),
    sa.Column('musicbrainz_albumid', sa.VARCHAR(length=50), nullable=True),
    sa.Column('musicbrainz_artistid', sa.VARCHAR(length=50), nullable=True),
    sa.Column('musicbrainz_albumartistid', sa.VARCHAR(length=50), nullable=True),
    sa.Column('musicbrainz_genre', sa.VARCHAR(length=100), nullable=True),
    sa.Column('cover_mime_type', sa.VARCHAR(length=50), nullable=True),
    sa.Column('file_type', sa.VARCHAR(length=50), nullable=True),
    sa.Column('bitrate', sa.INTEGER(), nullable=True),
    sa.Column('date_added', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('date_modified', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['album_id'], ['albums.id'], ),
    sa.ForeignKeyConstraint(['track_artist_id'], ['artists.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
